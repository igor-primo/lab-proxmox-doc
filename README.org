#+TITLE: Roteiro Kubernetes

Versão 0.6
* Introdução
Essa documentação utiliza princípios de programação
letrada. Consequentemente, alguns snippets que são descritos abaixo então
contidos em scripts extraídos da documentação. O nome do script
que contém o snippet respectivo está em um comentário na primeira
linha do snippet. 

Todos os scripts e comandos devem
ser executados como usuário raiz.

O login de usuário root via SSH deve
estar habilitado também.
* Clonar VMs
A clonagem das VMs é feita através do ProxMox manualmente.
* SSH
Criação de chaves assimétricas para acesso SSH sem senha. Esse passo deve ser
feito manualmente.
** Cria chaves assimétricas
#+begin_src sh
  # A variável HOSTS deve conter os IPs dos hosts da instalação do cluster.
  # Exemplo: HOSTS=(10.20.1.123 10.20.1.124)
  HOSTS=()
  ssh-keygen -q -t rsa -b 4096 -f ~/.ssh/id_rsa -P ""
  for HOST in "${HOSTS[@]}"; do ssh-copy-id $USER@$HOST; done
#+end_src
* Instalar Python
Instalação de Python e Pip no host de onde partirá a instalação
do kubernetes. O seguinte snippet instala Python e Pip em sistemas
baseados em RPM. Caso o sistema ponto de partida não seja baseado em
RPM, deve-se utilizar os comandos cabíveis.
#+begin_src sh :tangle deps-install.sh
  # ./deps-install.sh
  sudo dnf install python39 python3-pip -y
  pip3 install --upgrade pip
#+end_src
* Clonar repositório do Kubespray e instalar dependências.
#+begin_src sh :tangle kubespray-install.sh
  # ./kubespray-install.sh
  if [ ! -d /tmp/repos ]; then
	  mkdir /tmp/repos
  fi

  cd /tmp/repos

  if [ ! -d ./kubespray ]; then
	  git clone https://github.com/kubernetes-sigs/kubespray
  fi

  pip install virtualenv

  VENVDIR=kubespray-venv
  KUBESPRAYDIR=kubespray
  ANSIBLE_VERSION=2.12
  virtualenv  --python=$(which python3) $VENVDIR
  source $VENVDIR/bin/activate
  cd $KUBESPRAYDIR
  pip install -U -r requirements-$ANSIBLE_VERSION.txt
  #+end_src
* Atualizar sistemas
Caso não tenha sido feito ou precisa fazer novamente, atualizar os
sistemas operacionais. Esse script depende da existência dos arquivos
"inventory.ini" e "update-systems-playbook.yaml" que são providos
nesse repositório.
#+begin_src sh :tangle update-systems.sh
  # ./update-systems.sh
  (
	  source /tmp/repos/kubespray-venv/bin/activate
	  ansible-playbook -i inventory.ini update-systems-playbook.yaml --ask-become-pass
  )
#+end_src
Playbook Ansible que especifica a tarefa para atualizar os pacotes do
sistema operacional alvo para as versões mais recentes da distribuição.
#+begin_src yml :tangle update-systems-playbook.yaml
- name: Atualiza sistema
  hosts: server*
  become: true
  tasks:
  - name: Atualiza sistema
    package:
      name: '*'
      state: latest
#+end_src
Inventário contendo configuração para acesso aos hosts. Esse arquivo
deve ser atualizado com os IPs dos hosts do cluster manualmente.
#+begin_src text :tangle inventory.ini
server1 ansible_host=10.20.1.113
server2 ansible_host=10.20.1.115
#+end_src
* Desabilitar firewall
Caso os firewalls não tenham sido desabilitados, desabilitá-los.
#+begin_src sh :tangle remove-firewall-enable-root-ssh.sh
  # ./remove-firewall-enable-root-ssh.sh
  (
	  source /tmp/repos/kubespray-venv/bin/activate
	  ansible-playbook -i inventory.ini remove-firewall-enable-root-ssh-playbook.yaml --ask-become-pass
  )
#+end_src
#+begin_src yml :tangle remove-firewall-enable-root-ssh-playbook.yaml
- name: Remove firewall e habilitar login de root via SSH
  hosts: server*
  become: true
  tasks:
  - name: Remove firewall
    shell: |
      systemctl stop firewalld.service
      systemctl disable firewalld.service
#+end_src
* Próximos passos
Próximos passos são documentados no repositório oficial do [[https://github.com/kubernetes-sigs/kubespray][Kubespray]].
Mas há algumas ressalvas. A instalação utilizando ambientes virtuais
do python quando a instalação é feita a partir de uma máquina que será
um nó do cluster apresenta erros na busca de dependências do python.
Caso a máquina de partida da instalação deva ser um nó esse passo pode
ser omitido de qualquer modo.

Os seguintes passos devem ser executados manualmente. São eles:
#+begin_src sh
  cp -rfp inventory/sample inventory/mycluster
  # IPS é um vetor contendo os IPs dos hosts do cluster
  declare -a IPS=()
  CONFIG_FILE=inventory/mycluster/hosts.yaml python3 contrib/inventory_builder/inventory.py ${IPS[@]}
  # nesse ponto pode-se revisar e modificar as variáveis em
  # inventory/mycluster/group_vars/all/all.yml
  # inventory/mycluster/group_vars/k8s_cluster/k8s_cluster.yml

  sudo su
  source ../kubespray-venv/bin/activate

  # para limpar um cluster velho, executar como root:
  ansible-playbook -i inventory/mycluster/hosts.yaml --become --become-user=root reset.yml
  # para fazer uma nova instalação do kubernetes, executar como root:
  ansible-playbook -i inventory/mycluster/hosts.yaml --become --become-user=root cluster.yml
#+end_src
* Problemas encontrados
** 04-24-2023, 14:12
-  Após a instalação com sucesso houve algumas falhas: 1 nó
   configurado como control_plane não consta como control_plano na
   saída do comando "kubectl get node".
-  Após a instalação 2 nós constam como status "NotReady".
-  Os passos para chegar nessa situação foram:
   + Primeiro foi feita uma tentativa de instalação com inventário
     manualmente escrito. Nessa tentativa houve 1 único erro em todos
     os nós que dizia respeito ao serviço de firewall do SO.
   + Depois foi feita uma tentativa com um inventário escrito
     automaticamente pelo script como está na documentação do
     Kubespray. O script não modificou coisas relevantes no
     inventário. Nessa instalação houveram erros que diziam respeito
     ao nome de módulos de kernel, mas o sumário ao fim da instalação
     não constavam como se a instalação tivesse sido prejudicada por isso.
** 04-25-2023, 12:00
- Instalação do Kubernetes utilizando ambientes virtuais do python
  apresenta erros quando a máquina de onde parte a instalação será um
  nó do cluster. Com a utilização dos ambientes virtuais do python, o
  interpretador python utilizado é o que está dentro do ambiente
  virtual. O ansible não consegue encontrar o módulo selinux-python,
  nesse caso, mas consegue encontrar caso utilizemos o ambiente global
  do python.

